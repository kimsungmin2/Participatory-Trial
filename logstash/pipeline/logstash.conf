input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${JDBC_CONNECTION_STRING}"
    jdbc_user => "${DB_USERNAME}"
    jdbc_password => "${DB_PASSWORD}"
    tracking_column => "unix_ts_in_secs"
    tracking_column_type => "numeric"
    use_column_value => true
    schedule => "*/5 * * * * *"
    statement => "SELECT *, EXTRACT(EPOCH FROM updated_at) AS unix_ts_in_secs, id AS document_id FROM humor_boards WHERE (EXTRACT(EPOCH FROM updated_at) > :sql_last_value AND updated_at < NOW()) ORDER BY updated_at ASC"
    add_field => { "input_type" => "jdbc" } 
    add_field => { "board_name" => "humor_boards"}
  }

  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${JDBC_CONNECTION_STRING}"
    jdbc_user => "${DB_USERNAME}"
    jdbc_password => "${DB_PASSWORD}"
    tracking_column => "unix_ts_in_secs"
    tracking_column_type => "numeric"
    use_column_value => true
    schedule => "*/5 * * * * *"
    statement => "SELECT *, EXTRACT(EPOCH FROM updated_at) AS unix_ts_in_secs, id AS document_id FROM online_boards WHERE (EXTRACT(EPOCH FROM updated_at) > :sql_last_value AND updated_at < NOW()) ORDER BY updated_at ASC"
    add_field => { "input_type" => "jdbc" }
    add_field => { "board_name" => "online_boards"}
  }

  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${JDBC_CONNECTION_STRING}"
    jdbc_user => "${DB_USERNAME}"
    jdbc_password => "${DB_PASSWORD}"
    tracking_column => "unix_ts_in_secs"
    tracking_column_type => "numeric"
    use_column_value => true
    schedule => "*/5 * * * * *"
    statement => "SELECT *, EXTRACT(EPOCH FROM updated_at) AS unix_ts_in_secs, id AS document_id FROM trials WHERE (EXTRACT(EPOCH FROM updated_at) > :sql_last_value AND updated_at < NOW()) ORDER BY updated_at ASC"
    add_field => { "input_type" => "jdbc" }
    add_field => { "board_name" => "trials"}
  }

  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${JDBC_CONNECTION_STRING}"
    jdbc_user => "${DB_USERNAME}"
    jdbc_password => "${DB_PASSWORD}"
    tracking_column => "unix_ts_in_secs"
    tracking_column_type => "numeric"
    use_column_value => true
    schedule => "*/5 * * * * *"
    statement => "SELECT *, EXTRACT(EPOCH FROM updated_at) AS unix_ts_in_secs, id AS document_id FROM poltical_debate_boards WHERE (EXTRACT(EPOCH FROM updated_at) > :sql_last_value AND updated_at < NOW()) ORDER BY updated_at ASC"
    add_field => { "input_type" => "jdbc" }
    add_field => { "board_name" => "poltical_debate_boards"}
  }


  beats {
    port => 5044
    add_field => { "input_type" => "beats" }
    id => "logdata"
  }
}


filter {
  if [input_type] == "beats" {
    json {
      source => "message"
      id => "changeToJson"
      tag_on_failure => ["json_parsing_failed"]
    }
    if "json_parsing_failed" not in [tags] {
      if [log_type] == "error" {
        mutate {
          add_field => { "[@metadata][target_index]" => "error_logs" } 
        }
      } else if [log_type] == "info" {
        mutate {
          add_field => { "[@metadata][target_index]" => "info_logs" } 
        }
      }
      mutate {
        remove_field => [ "tags", "host", "@version", "agent", "log", "message" ] 
      }
    }
  }

  if [input_type] == "jdbc" {
    mutate {
      remove_field => ["@version", "unix_ts_in_secs"]
    }
  }
}

output {
  if [input_type] == "jdbc" {
  if [board_name] == "humor_boards" {
    elasticsearch {
      cloud_id => "${ELASTIC_CLOUD_ID}"
      cloud_auth => "${ELASTIC_CLOUD_AUTH}"
      index => "humor_board"
      document_id => "%{document_id}"
      ssl => "true"
    }
  } else if [board_name] == "online_boards" {
    elasticsearch {
      cloud_id => "${ELASTIC_CLOUD_ID}"
      cloud_auth => "${ELASTIC_CLOUD_AUTH}"
      ssl => "true"
      index => "online_board"
      document_id => "%{document_id}"
    }
  } else if [board_name] == "trials" {
    elasticsearch {
      cloud_id => "${ELASTIC_CLOUD_ID}"
      cloud_auth => "${ELASTIC_CLOUD_AUTH}"
      ssl => "true"
      index => "trial"
      document_id => "%{document_id}"
    }
  } else if [board_name] == "poltical_debate_boards" {
    elasticsearch {
      cloud_id => "${ELASTIC_CLOUD_ID}"
      cloud_auth => "${ELASTIC_CLOUD_AUTH}"
      ssl => "true"
      index => "poltical_debate_board"
      document_id => "%{document_id}"
    }
  }
}

  if [input_type] == "beats" {
    elasticsearch {
      cloud_id => "${ELASTIC_CLOUD_ID}"
      cloud_auth => "${ELASTIC_CLOUD_AUTH}"
      ssl => "true"
      index => "%{[@metadata][target_index]}"
      id => "sendToEla"
    }
        stdout {
      codec => rubydebug
    }

  }
}
