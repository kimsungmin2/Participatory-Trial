<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />

    <!-- Bootstrap JS, Popper.js, and jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://kit.fontawesome.com/8bc9e38e4e.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/css/main-style.css" />
  </head>
  <body>
    <%- include('partials/nav')  %>
    <header>
      <div>
        <p class="hot_vote_now">지금 가장 핫한 토론은?</p>
      </div>
      <div class="hot_vote">
        <div class="hot_vote_container">
          
          <div class="hot_vote_title">
            <div>
              <span>맥그리거</span>
            </div>
            <div>
              <span>VS</span>
            </div>
            <div>
              <span>할머니 500명</span>
            </div>
          </div>
          <div class="hot_vote_sub">
            <div class="fighter">
              <span>맥그리거</span>
              <span>5000표</span>
            </div>
            <div class="vs">
              <span>VS</span>
            </div>
            <div class="grandmothers">
              <span>할머니 500명</span>
              <span>1000표</span>
            </div>
          </div>
          <div class="hot_vote_timer">
            <span>1시간 30분 33초</span>
          </div>
        </div>
      </div>
      <div class="other">
        <form action="/search" method="get" id="searchForm">
        <div class="search">
          <input type="text" placeholder="검색어 입력" name="search" id="searchInput">
          <button type="submit" class="glass_button"><i class="fa-solid fa-magnifying-glass"></i></button>
        </div>
      </form>
      <button id="permissionBtn">알림 허용하기</button>

    </div>
      <div class="grid-container">
        <% for(let i = 0; i < 9; i++) { %>
        <div class="grid-item">
          <div class="vote-title">맥그리거 VS 할머니 500명</div>
          <div class="vote-options">
            <div class="vote-option">
              <div>맥그리거</div>
              <div class="vote-count">5000표</div>
            </div>
            <div class="vote-title">VS</div>
            <div class="vote-option">
              <div>할머니 500명</div>
              <div class="vote-count">1000표</div>
            </div>
          </div>
        </div>
        <% } %>

        <!-- 다른 grid-item 블록 추가 -->
      </div>
    </header>
    <script>
  document.addEventListener('DOMContentLoaded', function() {
  var permissionButton = document.getElementById('permissionBtn');
  if (permissionButton) {
    permissionButton.addEventListener('click', requestPermission);
  } else {
    console.error('No button with ID "permissionBtn" found');
  }
});

function requestPermission() {
  Notification.requestPermission().then(function(permission) {
    if (permission === 'granted') {
      console.log('Notification permission granted.');
      subscribeUser();
    } else {
      console.log('Notification permission denied.');
      alert('You need to enable notifications to use this service.');
    }
  });
}

function subscribeUser() {
  if ('serviceWorker' in navigator && 'PushManager' in window) {
    navigator.serviceWorker.register('/scripts/sw.js').then(function(registration) {
      console.log('ServiceWorker registration successful with scope:', registration.scope);
      const subscribeOptions = {
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array('BP7NuFz6M57eBbRExlszvMlomhxmowJmXazmBJAFjaj4Zf4isc4XBHSW3TCI7qZDRsL9i7arwDkswXqcnZRGN0w')
      };
      return registration.pushManager.subscribe(subscribeOptions);
    })
    .then(function(pushSubscription) {
      console.log('Received PushSubscription:', JSON.stringify(pushSubscription));
      sendSubscriptionToServer(pushSubscription);
    })
    .catch(function(err) {
      console.error('ServiceWorker registration or subscription failed:', err);
    });
  }
}

function sendSubscriptionToServer(subscription) {
  fetch('/users/register-token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(subscription)
  })
  .then(function(response) {
    if (!response.ok) throw new Error('Bad status code from server.');
    return response.json();
  })
  .then(function(responseData) {
    if (!(responseData.data && responseData.data.success)) throw new Error('Bad response from server.');
    console.log('Subscription data sent successfully:', responseData);
  })
  .catch(function(error) {
    console.error('Could not send subscription to server:', error);
  });
}

function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

  if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('/scripts/sw.js')
      .then(function(registration) {
        console.log('ServiceWorker registration successful with scope: ', registration.scope);
        subscribeUser();  // 구독 시작
      })
      .catch(function(err) {
        console.error('ServiceWorker registration failed: ', err);
      });
  });
}

    </script>
  </body>
</html>
