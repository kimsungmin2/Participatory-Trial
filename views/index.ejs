<!doctype html>
<html ng="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Participatory Trial</title>
    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <!-- Bootstrap JS, Popper.js, and jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script
      src="https://kit.fontawesome.com/8bc9e38e4e.js"
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="/css/main-style.css" />
  </head>
  <body>
    <header>
      <form action="/search" method="get" id="searchForm">
        <div class="search">
          <input
            type="text"
            placeholder="검색어 입력"
            name="search"
            id="searchInput"
          />
          <button type="submit" class="glass_button">
            <i class="fa-solid fa-magnifying-glass fa-2x"></i>
          </button>
        </div>
      </form>
      <%- include('partials/nav') %>
    </header>
    <main>
      <div class="hot_vote_now_container">
        <span>
          <h1 class="hot_vote_now">지금 가장 핫한 토론은?</>
        </span>
      </div>
      <img class="img" src="/image/pngwing.com.png" alt="">
      <div class="hot_vote">
        <div class="debate-toggle" style="text-align: right;">
          <!-- <div class="btn-group btn-group-toggle" data-toggle="buttons">
            <label class="btn btn-secondary active">
              <input type="radio" name="options" id="option1" autocomplete="off" checked> 재판
            </label>
            <label class="btn btn-secondary">
              <input type="radio" name="options" id="option2" autocomplete="off"> 유머
            </label>
            <label class="btn btn-secondary">
              <input type="radio" name="options" id="option3" autocomplete="off"> 정치
            </label>
          </div> -->
        </div>
        <% if (data.length !== 0) {%><!-- 데이터가 존재하는지 확인 -->
            <div class="hot_vote_container">
              <a href="/trials/<%= data[0].id %>" style="text-decoration: none; color: inherit;">
              <div class="hot_vote_title">
                <span class="title"><%= data[0].title %></span>
              </div>
              <div class="hot_vote_sub">
                <div class="title_one">
                  <span><%= data[0].title1 %></span>
                  <div class="vote-count"><%= data[0].votesCount1 %>표</div>
                </div>
                <div class="vs"><span>VS</span></div>
                <div class="title_two">
                  <span><%= data[0].title2 %></span>
                  <div class="vote-count"><%= data[0].votesCount2 %>표</div>
                </div>
              </div>
              <div class="hot_vote_timer">
                <span class="end_time" style="display: none;">투표 종료: <%= data[0].trialTime %></span>
                <span class="time_left" ></span>
              </div>
            </a>
            </div>
          </div>
        <div class="other">
      </div>
      <div class="grid-container">
        <% for(let i = 1; i < data.length; i++) { %>
          <a href="/trials/<%= data[i].id %>" class="grid-item">
            <div class="vote-title"><%= data[i].title %></div>
            <div class="vote-options">
              <div class="vote-option">
                <div><%= data[i].title1 %></div>
                <div class="vote-count"><%= data[i].votesCount1 %>표</div>
              </div>
              <div class="vote-title">VS</div>
              <div class="vote-option">
                <div><%= data[i].title2 %></div>
                <div class="vote-count"><%= data[i].votesCount2 %>표</div>
              </div>
              <div class="hot_vote_timer">
                <div class="hot_vote_timer">
                  <span class="end_time" style="display: none;">투표 종료: <%= data[i].trialTime %></span>
                  <span class="time_left"></span>
                </div>
              </div>
            </div>
          </a>
        <% } %>
      </div>
      <% } %>
    </header>
    <script>
document.addEventListener("DOMContentLoaded", function() {
  const timeElements = document.querySelectorAll('.end_time');
  timeElements.forEach(element => {
    const endTime = new Date(element.innerText.replace('투표 종료: ', '').trim()); // 종료 시간 파싱
    const countdownElement = element.nextElementSibling; // 'time_left' span 선택
    function updateCountdown() {
      const now = new Date();
      const timeLeft = endTime - now;
      if (timeLeft > 0) {
        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
        countdownElement.innerText = `남은 시간: ${days}일 ${hours}시간 ${minutes}분 ${seconds}초`;
      } else {
        countdownElement.innerText = "투표 종료됨";
        clearInterval(intervalId);
      }
    }
    updateCountdown(); // 초기 남은 시간 업데이트
    const intervalId = setInterval(updateCountdown, 1000); // 매 초마다 업데이트
  });
});
      document
        .getElementById('searchForm')
        .addEventListener('submit', function (event) {
          event.preventDefault();
          const searchInput = document.getElementById('searchInput').value;
          const queryParams = new URLSearchParams();
          queryParams.append('search', searchInput); // 검색어 항상 추가
          queryParams.append('type', 'titleContent'); // 선택된 검색 옵션 추가
          // 폼 액션 URL과 쿼리 파라미터를 조합하여 요청 URL 생성
          window.location.href = `/search/all?${queryParams.toString()}`;
        });
      document.addEventListener('DOMContentLoaded', function () {
        var permissionButton = document.getElementById('permissionBtn');
        if (permissionButton) {
          permissionButton.addEventListener('click', requestPermission);
        } else {
          console.error('No button with ID "permissionBtn" found');
        }
      });
      function requestPermission() {
        Notification.requestPermission().then(function (permission) {
          if (permission === 'granted') {
            console.log('Notification permission granted.');
            subscribeUser();
          } else {
            console.log('Notification permission denied.');
            alert('You need to enable notifications to use this service.');
          }
        });
      }
      function subscribeUser() {
        if ('serviceWorker' in navigator && 'PushManager' in window) {
          navigator.serviceWorker
            .register('/scripts/sw.js')
            .then(function (registration) {
              console.log(
                'ServiceWorker registration successful with scope:',
                registration.scope,
              );
              const subscribeOptions = {
                userVisibleOnly: true,
                applicationServerKey: urlBase64ToUint8Array(
                  'BP7NuFz6M57eBbRExlszvMlomhxmowJmXazmBJAFjaj4Zf4isc4XBHSW3TCI7qZDRsL9i7arwDkswXqcnZRGN0w',
                ),
              };
              return registration.pushManager.subscribe(subscribeOptions);
            })
            .then(function (pushSubscription) {
              console.log(
                'Received PushSubscription:',
                JSON.stringify(pushSubscription),
              );
              sendSubscriptionToServer(pushSubscription);
            })
            .catch(function (err) {
              console.error(
                'ServiceWorker registration or subscription failed:',
                err,
              );
            });
        }
      }
      function sendSubscriptionToServer(subscription) {
        fetch('/users/register-token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(subscription),
        })
          .then(function (response) {
            if (!response.ok) throw new Error('Bad status code from server.');
            return response.json();
          })
          .then(function (responseData) {
            if (!(responseData.data && responseData.data.success))
              throw new Error('Bad response from server.');
            console.log('Subscription data sent successfully:', responseData);
          })
          .catch(function (error) {
            console.error('Could not send subscription to server:', error);
          });
      }
      function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        const base64 = (base64String + padding)
          .replace(/\-/g, '+')
          .replace(/_/g, '/');
        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);
        for (let i = 0; i < rawData.length; ++i) {
          outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
      }
      // if ('serviceWorker' in navigator) {
      //   window.addEventListener('load', function () {
      //     navigator.serviceWorker
      //       .register('/scripts/sw.js')
      //       .then(function (registration) {
      //         console.log(
      //           'ServiceWorker registration successful with scope: ',
      //           registration.scope,
      //         );
      //         subscribeUser(); // 구독 시작
      //       })
      //       .catch(function (err) {
      //         console.error('ServiceWorker registration failed: ', err);
      //       });
      //   });
      // }
      requestPermission();
    </script>
  </body>
</html>
















